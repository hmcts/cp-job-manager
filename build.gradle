plugins {
    id 'java'
    id 'java-library'
    id 'com.avast.gradle.docker-compose' version '0.17.12'
}

allprojects {
    group = "uk.gov.justice.services"
    version = "1.0.0-SNAPSHOT"

    repositories {
        mavenCentral()
        mavenLocal()
    }
}

// Centralized dependency versions
ext.versions = [
    // Java EE APIs
    javaeeApi: '8.0',
    transactionApi: '1.3',
    cdiApi: '2.0',
    
    // Logging
    slf4j: '1.7.36',
    
    // Google Libraries
    guava: '31.1-jre',
    
    // Jackson
    jackson: '2.14.2',
    
    // JSON APIs
    jsonApi: '1.1.4',
    glassfishJson: '1.1.4',
    
    // Application Server
    tomee: '9.0.0-M8',
    tomeeLegacy: '8.0.13',
    
    // Database
    postgresql: '42.5.4',
    
    // Testing - JUnit
    junit: '5.9.3',
    junitPlatform: '1.9.3',
    
    // Testing - Mockito
    mockito: '4.6.1',
    
    // Testing - Others
    hamcrest: '2.2',
    awaitility: '4.2.0',
    liquibase: '4.19.1',
    
    // Commons
    commonsLogging: '1.2'
]

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    
    // Apply docker-compose plugin to modules that need PostgreSQL
    if (project.name in ['jobstore-persistence', 'job-manager-it']) {
        apply plugin: 'com.avast.gradle.docker-compose'
        
        dockerCompose {
            useComposeFiles = ["${rootProject.projectDir}/docker-compose.yml"]
            captureContainersOutput = false
            stopContainers = true
            removeContainers = true
            removeVolumes = false // Keep volumes for faster subsequent runs
            waitForTcpPorts = true
            waitForTcpPortsTimeout = java.time.Duration.ofMinutes(2)
            projectName = 'cp-job-manager' // Use consistent project name
        }
        
        // Clean up before composeUp to handle stuck containers
        tasks.named('composeUp') {
            doFirst {
                // Clean up any existing containers and networks before starting
                try {
                    exec {
                        commandLine 'sh', '-c', '''
                            docker ps -aq --filter "name=cp-job-manager-postgres" | xargs -r docker rm -f 2>/dev/null || true
                            docker network rm cp-job-manager_default 2>/dev/null || true
                            docker-compose -f ${rootProject.projectDir}/docker-compose.yml -p cp-job-manager down --remove-orphans 2>/dev/null || true
                        '''
                        ignoreExitValue = true
                    }
                } catch (Exception e) {
                    // Ignore cleanup errors
                }
            }
        }
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    // Ensure all tasks use Java 21
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 21
        options.fork = true
        options.forkOptions.javaHome = file(System.getProperty('java.home'))
    }


    tasks.withType(Test) {
        useJUnitPlatform()
        maxHeapSize = "64m"
        
        // Only include actual test classes (end with Test or Tests)
        include "**/*Test.class"
        include "**/*Tests.class"
        
        // Force tests to use Java 21
        jvmArgs = [
            "-Djava.version=21",
            "-Dfile.encoding=UTF-8"
        ]
        
        // Set system properties for Java 21 compatibility
        systemProperty "java.version", "21"
        systemProperty "file.encoding", "UTF-8"
        
        // Disable build cache for tests that depend on external services (like PostgreSQL)
        // This ensures tests always run and catch database connectivity issues
        outputs.cacheIf { false }
        
        // Configure docker-compose for tests that need PostgreSQL
        if (project.name in ['jobstore-persistence', 'job-manager-it']) {
            // Use a shared root-level composeUp task to avoid conflicts
            def sharedComposeUp = rootProject.tasks.findByName('composeUp')
            if (sharedComposeUp == null) {
                // Create root-level composeUp task if it doesn't exist
                rootProject.apply plugin: 'com.avast.gradle.docker-compose'
                rootProject.dockerCompose {
                    useComposeFiles = ["${rootProject.projectDir}/docker-compose.yml"]
                    captureContainersOutput = false
                    stopContainers = true
                    removeContainers = true
                    removeVolumes = false
                    waitForTcpPorts = true
                    waitForTcpPortsTimeout = java.time.Duration.ofMinutes(2)
                    projectName = 'cp-job-manager'
                }
                sharedComposeUp = rootProject.tasks.named('composeUp')
            }
            
            dependsOn sharedComposeUp
            finalizedBy project.tasks.named('composeDown')
            
            // Set port and host for docker-compose services
            // Port 55432 is hardcoded in docker-compose.yml
            systemProperty "POSTGRES_PORT", "55432"
            systemProperty "INTEGRATION_HOST_KEY", "localhost"
        }
        
        // Tests re-enabled with Java 21 configuration
        // enabled = false
    }

    dependencies {
        // JUnit Jupiter Engine and Platform Launcher required for tests to run
        testImplementation "org.junit.jupiter:junit-jupiter-engine:${versions.junit}"
        testImplementation "org.junit.platform:junit-platform-launcher:${versions.junitPlatform}"
        
        // Mockito version compatible with Java 21
        testImplementation "org.mockito:mockito-core:${versions.mockito}"
        testImplementation "org.mockito:mockito-junit-jupiter:${versions.mockito}"
    }
}
